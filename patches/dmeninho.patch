diff --git a/config.def.h b/config.def.h
index 1edb647..1899b95 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,20 +1,21 @@
 /* See LICENSE file for copyright and license details. */
 /* Default settings; can be overriden by command line. */
 
-static int topbar = 1;                      /* -b  option; if 0, dmenu appears at bottom     */
-/* -fn option overrides fonts[0]; default X11 font or font set */
-static const char *fonts[] = {
-	"monospace:size=10"
-};
-static const char *prompt      = NULL;      /* -p  option; prompt to the left of input field */
+static int topbar           = 1;        /* -b  option; if 0, dmenu appears at bottom     */
+static int draw_input       = 1;        /* -noi option; if 0, the input is not displayed */
+static int centered         = 1;        /* -c option; centers dmenu on screen */
+static unsigned int lines   = 0;        /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
+static unsigned int border_width = 0;
+static const char *fonts[]  = { "NotoMono Nerd Font:size=10" };
+static const char *prompt   = NULL;     /* -p  option; prompt to the left of input field */
+
 static const char *colors[SchemeLast][2] = {
-	/*     fg         bg       */
-	[SchemeNorm] = { "#bbbbbb", "#222222" },
-	[SchemeSel] = { "#eeeeee", "#005577" },
-	[SchemeOut] = { "#000000", "#00ffff" },
+	/*               fg         bg       */
+	[SchemeNorm] = { "#A9A9A9", "#2A2A2A" },
+	[SchemeSel]  = { "#2A2A2A", "#696969" },
+	[SchemeOut]  = { "#000000", "#00ffff" },
+    [SchemeBord] = { "#2A2A2A", "#AE81FF" },
 };
-/* -l option; if nonzero, dmenu uses vertical list with given number of lines */
-static unsigned int lines      = 0;
 
 /*
  * Characters not considered part of a word while deleting words
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..1899b95
--- /dev/null
+++ b/config.h
@@ -0,0 +1,24 @@
+/* See LICENSE file for copyright and license details. */
+/* Default settings; can be overriden by command line. */
+
+static int topbar           = 1;        /* -b  option; if 0, dmenu appears at bottom     */
+static int draw_input       = 1;        /* -noi option; if 0, the input is not displayed */
+static int centered         = 1;        /* -c option; centers dmenu on screen */
+static unsigned int lines   = 0;        /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
+static unsigned int border_width = 0;
+static const char *fonts[]  = { "NotoMono Nerd Font:size=10" };
+static const char *prompt   = NULL;     /* -p  option; prompt to the left of input field */
+
+static const char *colors[SchemeLast][2] = {
+	/*               fg         bg       */
+	[SchemeNorm] = { "#A9A9A9", "#2A2A2A" },
+	[SchemeSel]  = { "#2A2A2A", "#696969" },
+	[SchemeOut]  = { "#000000", "#00ffff" },
+    [SchemeBord] = { "#2A2A2A", "#AE81FF" },
+};
+
+/*
+ * Characters not considered part of a word while deleting words
+ * for example: " /?\"&[]"
+ */
+static const char worddelimiters[] = " ";
diff --git a/dmenu b/dmenu
new file mode 100755
index 0000000..ff86410
Binary files /dev/null and b/dmenu differ
diff --git a/dmenu.1 b/dmenu.1
index 323f93c..4eabe0c 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -8,6 +8,12 @@ dmenu \- dynamic menu
 .IR lines ]
 .RB [ \-m
 .IR monitor ]
+.RB [ \-x
+.IR xoffset ]
+.RB [ \-y
+.IR yoffset ]
+.RB [ \-z
+.IR width ]
 .RB [ \-p
 .IR prompt ]
 .RB [ \-fn
@@ -37,6 +43,9 @@ is a script used by
 which lists programs in the user's $PATH and runs the result in their $SHELL.
 .SH OPTIONS
 .TP
+.B \-c
+dmenu appears centered on the screen.
+.TP
 .B \-b
 dmenu appears at the bottom of the screen.
 .TP
@@ -54,6 +63,24 @@ dmenu lists items vertically, with the given number of lines.
 dmenu is displayed on the monitor number supplied. Monitor numbers are starting
 from 0.
 .TP
+.BI \-x " xoffset"
+dmenu is placed at this offset measured from the left side of the monitor.
+Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-y " yoffset"
+dmenu is placed at this offset measured from the top of the monitor.  If the
+.B \-b
+option is used, the offset is measured from the bottom.  Can be negative.
+If option
+.B \-m
+is present, the measurement will use the given monitor.
+.TP
+.BI \-z " width"
+sets the width of the dmenu window.
+.TP
 .BI \-p " prompt"
 defines the prompt to be displayed to the left of the input field.
 .TP
diff --git a/dmenu.c b/dmenu.c
index 804da64..1d1c81e 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -25,7 +25,7 @@
 #define TEXTW(X)              (drw_fontset_getwidth(drw, (X)) + lrpad)
 
 /* enums */
-enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeOut, SchemeBord, SchemeLast }; /* color schemes */
 
 struct item {
 	char *text;
@@ -36,6 +36,9 @@ struct item {
 static char text[BUFSIZ] = "";
 static char *embed;
 static int bh, mw, mh;
+static int dmx = 0; /* put dmenu at this x offset */
+static int dmy = 0; /* put dmenu at this y offset (measured from the bottom if topbar is 0) */
+static unsigned int dmw = 0; /* make dmenu this wide */
 static int inputw = 0, promptw;
 static int lrpad; /* sum of left and right padding */
 static size_t cursor;
@@ -147,30 +150,32 @@ drawmenu(void)
 {
 	unsigned int curpos;
 	struct item *item;
-	int x = 0, y = 0, w;
+	int x = 0, y = 0, w = 0;
 
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	drw_rect(drw, 0, 0, mw, mh, 1, 1);
 
 	if (prompt && *prompt) {
-		drw_setscheme(drw, scheme[SchemeSel]);
-		x = drw_text(drw, x, 0, promptw, bh, lrpad / 2, prompt, 0);
+		drw_setscheme(drw, scheme[SchemeBord]);
+		x = drw_text(drw, x, 0, !draw_input ? mw : promptw, bh, lrpad / 2, prompt, 0);
 	}
-	/* draw input field */
-	w = (lines > 0 || !matches) ? mw - x : inputw;
-	drw_setscheme(drw, scheme[SchemeNorm]);
-	drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
 
-	curpos = TEXTW(text) - TEXTW(&text[cursor]);
-	if ((curpos += lrpad / 2 - 1) < w) {
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
-	}
+    if (draw_input) {
+        w = (lines > 0 || !matches) ? mw - x : inputw;
+        drw_setscheme(drw, scheme[SchemeNorm]);
+        drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
+
+        curpos = TEXTW(text) - TEXTW(&text[cursor]);
+        if ((curpos += lrpad / 2 - 1) < w) {
+            drw_setscheme(drw, scheme[SchemeNorm]);
+            drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+        }
+    }
 
 	if (lines > 0) {
 		/* draw vertical list */
 		for (item = curr; item != next; item = item->right)
-			drawitem(item, x, y += bh, mw - x);
+			drawitem(item, (!draw_input && prompt && *prompt) ? x - mw : x - promptw, y += bh, mw);
 	} else if (matches) {
 		/* draw horizontal list */
 		x += inputw;
@@ -178,8 +183,8 @@ drawmenu(void)
 		if (curr->left) {
 			drw_setscheme(drw, scheme[SchemeNorm]);
 			drw_text(drw, x, 0, w, bh, lrpad / 2, "<", 0);
+            x += w;
 		}
-		x += w;
 		for (item = curr; item != next; item = item->right)
 			x = drawitem(item, x, 0, textw_clamp(item->text, mw - x - TEXTW(">")));
 		if (next) {
@@ -358,16 +363,19 @@ keypress(XKeyEvent *ev)
 		case XK_p: ksym = XK_Up;        break;
 
 		case XK_k: /* delete right */
-			text[cursor] = '\0';
-			match();
+			if (draw_input) {
+				text[cursor] = '\0';
+				match();
+			}
 			break;
 		case XK_u: /* delete left */
-			insert(NULL, 0 - cursor);
+			if (draw_input)
+				insert(NULL, 0 - cursor);
 			break;
 		case XK_w: /* delete word */
-			while (cursor > 0 && strchr(worddelimiters, text[nextrune(-1)]))
+			while (cursor > 0 && strchr(worddelimiters, text[nextrune(-1)]) && draw_input)
 				insert(NULL, nextrune(-1) - cursor);
-			while (cursor > 0 && !strchr(worddelimiters, text[nextrune(-1)]))
+			while (cursor > 0 && !strchr(worddelimiters, text[nextrune(-1)]) && draw_input)
 				insert(NULL, nextrune(-1) - cursor);
 			break;
 		case XK_y: /* paste selection */
@@ -414,23 +422,23 @@ keypress(XKeyEvent *ev)
 	switch(ksym) {
 	default:
 insert:
-		if (!iscntrl((unsigned char)*buf))
+		if (!iscntrl((unsigned char)*buf) && draw_input)
 			insert(buf, len);
 		break;
 	case XK_Delete:
 	case XK_KP_Delete:
-		if (text[cursor] == '\0')
+		if (text[cursor] == '\0' || !draw_input)
 			return;
 		cursor = nextrune(+1);
 		/* fallthrough */
 	case XK_BackSpace:
-		if (cursor == 0)
+		if (cursor == 0 || !draw_input)
 			return;
 		insert(NULL, nextrune(-1) - cursor);
 		break;
 	case XK_End:
 	case XK_KP_End:
-		if (text[cursor] != '\0') {
+		if (text[cursor] != '\0' && draw_input) {
 			cursor = strlen(text);
 			break;
 		}
@@ -514,7 +522,7 @@ insert:
 		}
 		break;
 	case XK_Tab:
-		if (!sel)
+		if (!sel || !draw_input)
 			return;
 		cursor = strnlen(sel->text, sizeof text - 1);
 		memcpy(text, sel->text, cursor);
@@ -662,9 +670,14 @@ setup(void)
 				if (INTERSECT(x, y, 1, 1, info[i]) != 0)
 					break;
 
-		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
-		mw = info[i].width;
+        mw = (dmw > 0 ? dmw : info[i].width);;
+        if (centered) {
+            x = info[i].x_org + ((info[i].width - mw) / 2);
+            y = info[i].y_org + ((info[i].height - mh) / 2);
+        } else {
+            x = info[i].x_org + dmx;
+            y = info[i].y_org + (topbar ? dmy : info[i].height - mh - dmy);
+        }
 		XFree(info);
 	} else
 #endif
@@ -672,23 +685,35 @@ setup(void)
 		if (!XGetWindowAttributes(dpy, parentwin, &wa))
 			die("could not get embedding window attributes: 0x%lx",
 			    parentwin);
-		x = 0;
-		y = topbar ? 0 : wa.height - mh;
-		mw = wa.width;
+
+        mw = (dmw > 0 ? dmw : wa.width);
+        if (centered) {
+			x = (wa.width  - mw) / 2;
+			y = (wa.height - mh) / 2;
+        }
+        else{
+            x = dmx;
+            y = topbar ? dmy : wa.height - mh - dmy;
+        }
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
-	inputw = mw / 3; /* input width: ~33% of monitor width */
+	inputw = !draw_input ? 0 : mw / 3; /* input width: ~33% of monitor width */
 	match();
 
 	/* create menu window */
 	swa.override_redirect = True;
 	swa.background_pixel = scheme[SchemeNorm][ColBg].pixel;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
-	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
+	win = XCreateWindow(dpy, root, x, y, mw, mh, border_width,
 	                    CopyFromParent, CopyFromParent, CopyFromParent,
 	                    CWOverrideRedirect | CWBackPixel | CWEventMask, &swa);
+    if (border_width) {
+        XSetWindowBorder(dpy, win, scheme[SchemeBord][ColBg].pixel);
+    }
+
 	XSetClassHint(dpy, win, &ch);
 
+
 	/* input methods */
 	if ((xim = XOpenIM(dpy, NULL, NULL, NULL)) == NULL)
 		die("XOpenIM failed: could not open input device");
@@ -714,7 +739,8 @@ setup(void)
 static void
 usage(void)
 {
-	die("usage: dmenu [-bfiv] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	die("usage: dmenu [-bfiv] [-noi] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	      "             [-x xoffset] [-y yoffset] [-z width]\n"
 	    "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]");
 }
 
@@ -733,6 +759,8 @@ main(int argc, char *argv[])
 			topbar = 0;
 		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = 1;
+        else if (!strcmp(argv[i], "-noi")) /* no input field. intended to be used with a prompt */
+			draw_input = 0;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
@@ -741,6 +769,12 @@ main(int argc, char *argv[])
 		/* these options take one argument */
 		else if (!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-x"))   /* window x offset */
+			dmx = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-y"))   /* window y offset (from bottom up if -b) */
+			dmy = atoi(argv[++i]);
+		else if (!strcmp(argv[i], "-z"))   /* make dmenu this wide */
+			dmw = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-m"))
 			mon = atoi(argv[++i]);
 		else if (!strcmp(argv[i], "-p"))   /* adds prompt to left of input field */
@@ -757,6 +791,10 @@ main(int argc, char *argv[])
 			colors[SchemeSel][ColFg] = argv[++i];
 		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-bw"))
+			border_width = atoi(argv[++i]); /* border width */
+		else if (!strcmp(argv[i], "-c"))   /* centers dmenu on screen */
+			centered = 1;
 		else
 			usage();
 
diff --git a/dmenu.o b/dmenu.o
new file mode 100644
index 0000000..2e750c0
Binary files /dev/null and b/dmenu.o differ
diff --git a/drw.c b/drw.c
index c41e6af..eb71da7 100644
--- a/drw.c
+++ b/drw.c
@@ -237,8 +237,7 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 	XftResult result;
 	int charexists = 0, overflow = 0;
 	/* keep track of a couple codepoints for which we have no match. */
-	static unsigned int nomatches[128], ellipsis_width, invalid_width;
-	static const char invalid[] = "�";
+	static unsigned int nomatches[128], ellipsis_width;
 
 	if (!drw || (render && (!drw->scheme || !w)) || !text || !drw->fonts)
 		return 0;
@@ -248,8 +247,6 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 	} else {
 		XSetForeground(drw->dpy, drw->gc, drw->scheme[invert ? ColFg : ColBg].pixel);
 		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
-		if (w < lpad)
-			return x + w;
 		d = XftDrawCreate(drw->dpy, drw->drawable,
 		                  DefaultVisual(drw->dpy, drw->screen),
 		                  DefaultColormap(drw->dpy, drw->screen));
@@ -260,8 +257,6 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 	usedfont = drw->fonts;
 	if (!ellipsis_width && render)
 		ellipsis_width = drw_fontset_getwidth(drw, "...");
-	if (!invalid_width && render)
-		invalid_width = drw_fontset_getwidth(drw, invalid);
 	while (1) {
 		ew = ellipsis_len = utf8err = utf8charlen = utf8strlen = 0;
 		utf8str = text;
@@ -289,9 +284,9 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 						else
 							utf8strlen = ellipsis_len;
 					} else if (curfont == usedfont) {
+						utf8strlen += utf8charlen;
 						text += utf8charlen;
-						utf8strlen += utf8err ? 0 : utf8charlen;
-						ew += utf8err ? 0 : tmpw;
+						ew += tmpw;
 					} else {
 						nextfont = curfont;
 					}
@@ -299,7 +294,7 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 				}
 			}
 
-			if (overflow || !charexists || nextfont || utf8err)
+			if (overflow || !charexists || nextfont)
 				break;
 			else
 				charexists = 0;
@@ -314,12 +309,6 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lp
 			x += ew;
 			w -= ew;
 		}
-		if (utf8err && (!render || invalid_width < w)) {
-			if (render)
-				drw_text(drw, x, y, w, h, 0, invalid, invert);
-			x += invalid_width;
-			w -= invalid_width;
-		}
 		if (render && overflow)
 			drw_text(drw, ellipsis_x, y, ellipsis_w, h, 0, "...", invert);
 
diff --git a/drw.o b/drw.o
new file mode 100644
index 0000000..8fa1b01
Binary files /dev/null and b/drw.o differ
diff --git a/stest b/stest
new file mode 100755
index 0000000..f4521f1
Binary files /dev/null and b/stest differ
diff --git a/stest.o b/stest.o
new file mode 100644
index 0000000..1b7b114
Binary files /dev/null and b/stest.o differ
diff --git a/util.c b/util.c
index 8e26a51..96b82c9 100644
--- a/util.c
+++ b/util.c
@@ -1,5 +1,4 @@
 /* See LICENSE file for copyright and license details. */
-#include <errno.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -11,17 +10,17 @@ void
 die(const char *fmt, ...)
 {
 	va_list ap;
-	int saved_errno;
-
-	saved_errno = errno;
 
 	va_start(ap, fmt);
 	vfprintf(stderr, fmt, ap);
 	va_end(ap);
 
-	if (fmt[0] && fmt[strlen(fmt)-1] == ':')
-		fprintf(stderr, " %s", strerror(saved_errno));
-	fputc('\n', stderr);
+	if (fmt[0] && fmt[strlen(fmt)-1] == ':') {
+		fputc(' ', stderr);
+		perror(NULL);
+	} else {
+		fputc('\n', stderr);
+	}
 
 	exit(1);
 }
diff --git a/util.o b/util.o
new file mode 100644
index 0000000..3974348
Binary files /dev/null and b/util.o differ
